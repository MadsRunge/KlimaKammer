#!/usr/bin/env python3
"""
Climate Analyzer - Reads sensor data files and provides AI-powered climate analysis,
enhanced with BBR building data.
"""

import os
from datetime import datetime
from pathlib import Path
from typing import Optional
from dataclasses import dataclass

from openai import OpenAI
from dotenv import load_dotenv

# Importer BBR service og dataclass
# Antager at bbr_service.py er i samme mappe eller tilg√¶ngelig i PYTHONPATH
try:
    from bbr_service import BBRAddressService, BuildingData
except ImportError:
    print("üî¥ FEJL: Kunne ikke importere BBRAddressService eller BuildingData.")
    print("   S√∏rg for, at 'bbr_service.py' er i samme mappe eller korrekt installeret.")
    # Du kan v√¶lge at lade programmet afslutte her, eller forts√¶tte uden BBR funktionalitet.
    # For nu s√¶tter vi dem til None, s√• programmet kan starte, men BBR-delen vil fejle.
    BBRAddressService = None
    BuildingData = None

# Load environment variables (for OpenAI API Key etc.)
load_dotenv()


@dataclass
class ClimateReading:
    """Represents a single climate reading."""
    timestamp: str
    temperature: float
    humidity: float
    unix_timestamp: float


class DataReader:
    """Handles reading current sensor data from files."""
    
    def __init__(self, data_dir: str = "sensordata"):
        self.data_dir = Path(data_dir)
        
        if not self.data_dir.exists():
            try:
                self.data_dir.mkdir(parents=True, exist_ok=True)
                print(f"INFO: Datamappen '{data_dir}' fandtes ikke og blev oprettet.")
                current_file_path = self.data_dir / "current_reading.txt"
                if not current_file_path.exists():
                    print(f"ADVARSEL: '{current_file_path}' ikke fundet. Opret testdata if√∏lge README, hvis der ikke bruges live sensor.")

            except Exception as e:
                raise FileNotFoundError(f"Datamappen blev ikke fundet og kunne ikke oprettes: {data_dir}. Fejl: {e}")
    
    def get_current_reading(self) -> Optional[ClimateReading]:
        """
        Read the most recent sensor reading.
        """
        current_file = self.data_dir / "current_reading.txt"
        
        if not current_file.exists():
            print(f"‚ùå Fil med nuv√¶rende m√•ling ikke fundet: {current_file}")
            print("üí° S√∏rg for, at 'sensor_logger.py' k√∏rer, eller opret testdata.")
            return None
        
        try:
            with open(current_file, 'r') as f:
                lines = f.readlines()
            
            data = {}
            for line in lines:
                if ':' in line:
                    key, value = line.strip().split(':', 1)
                    data[key.strip()] = value.strip()
            
            return ClimateReading(
                timestamp=data.get('Last Updated', ''),
                temperature=float(data.get('Temperature', '0').replace('¬∞C', '')),
                humidity=float(data.get('Humidity', '0').replace('%', '')),
                unix_timestamp=float(data.get('Unix Timestamp', '0'))
            )
        except Exception as e:
            print(f"‚ùå Fejl ved l√¶sning af nuv√¶rende data fra '{current_file}': {e}")
            return None


class ClimateAnalyzer:
    """AI-powered climate analysis using OpenAI."""
    
    def __init__(self, data_dir: str = "sensordata"):
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable not set.")
        
        self.client = OpenAI(api_key=api_key)
        self.model = "gpt-4"
        self.data_dir = Path(data_dir)
        self.analysis_dir = self.data_dir / "analyses"
        self.analysis_dir.mkdir(exist_ok=True)
    
    def analyze_current_conditions(self, 
                                   current_reading: ClimateReading, 
                                   bbr_data: Optional[BuildingData], 
                                   address: str) -> str:
        """
        Analyze current climate conditions using sensor data and BBR data.
        """
        prompt = self._create_current_analysis_prompt(current_reading, bbr_data, address)
        return self._get_ai_response(prompt, "current_conditions_bbr")
    
    def _format_bbr_data_for_prompt(self, bbr_data: Optional[BuildingData]) -> str:
        """Formats BuildingData into a string for the AI prompt."""
        if not bbr_data:
            return "Ingen BBR data tilg√¶ngelig for denne adresse.\n"

        info_parts = []
        
        def add_info(label, value, unit=""):
            if value not in [None, "", []]:
                info_parts.append(f"{label}: {value}{unit}")

        add_info("Bygningstype", bbr_data.building_type)
        add_info("Opf√∏relses√•r", bbr_data.building_year)
        if bbr_data.renovation_year and bbr_data.renovation_year != bbr_data.building_year:
            add_info("Renoveret √•r", bbr_data.renovation_year)
        
        add_info("Yderv√¶gsmateriale", bbr_data.exterior_material)
        add_info("Tagd√¶kningsmateriale", bbr_data.roof_material)
        
        add_info("Samlet bygningsareal", bbr_data.total_building_area, " m¬≤")
        add_info("Samlet boligareal", bbr_data.total_residential_area, " m¬≤")
        add_info("Samlet erhvervsareal", bbr_data.total_commercial_area, " m¬≤")
        add_info("Bebygget areal", bbr_data.built_area, " m¬≤")
        
        add_info("Antal etager", bbr_data.floors)
        if bbr_data.deviating_floors:
             # BBR's 'byg055AfvigendeEtager' kode for k√¶lder er ofte "10"
             # Din _translate_floor_type i bbr_service kan forbedres til at inkludere dette for klartekst
            k√¶lder_info = "Ja" if "10" in str(bbr_data.deviating_floors) else f"Kode: {bbr_data.deviating_floors}"
            add_info("Afvigende etager (f.eks. k√¶lder)", k√¶lder_info)


        # Detaljeret k√¶lder- og loftsareal fra floor_details
        if bbr_data.floor_details:
            has_basement_floor = False
            has_attic_floor = False
            for floor in bbr_data.floor_details:
                if floor.get('type_code') == '2': # K√¶lder
                    has_basement_floor = True
                    add_info(f"K√¶lder ({floor.get('designation', 'kl')}) areal", floor.get('total_area') or floor.get('basement_area'), " m¬≤")
                elif floor.get('type_code') == '1': # Tagetage
                    has_attic_floor = True
                    add_info(f"Tagetage ({floor.get('designation', 'tag')}) areal", floor.get('total_area') or floor.get('attic_area'), " m¬≤")
            
            if not bbr_data.basement_area and not has_basement_floor: # Hvis ikke allerede tilf√∏jet
                 add_info("K√¶lderareal (direkte felt)", bbr_data.basement_area, " m¬≤")
            if not bbr_data.attic_area and not has_attic_floor: # Hvis ikke allerede tilf√∏jet
                 add_info("Loftsareal (direkte felt)", bbr_data.attic_area, " m¬≤")


        add_info("Varmeinstallation", bbr_data.heating_type)
        add_info("Elevator", "Ja" if bbr_data.has_elevator else "Nej")
        add_info("Koordinater (reference)", bbr_data.coordinate)
        
        if not info_parts:
            return "BBR data fundet, men relevante felter er tomme.\n"
            
        return "\n".join(info_parts) + "\n"

    def _create_current_analysis_prompt(self, 
                                        reading: ClimateReading, 
                                        bbr_data: Optional[BuildingData], 
                                        address: str) -> str:
        """Create prompt for current conditions analysis, including BBR data."""
        
        bbr_info_string = self._format_bbr_data_for_prompt(bbr_data)

        prompt = f"""
Du er en intelligent klimarisikovurderingsassistent.

ADRESSE: {address}

NUV√ÜRENDE SENSORM√ÖLINGER:
üå°Ô∏è Temperatur (realtid): {reading.temperature:.1f} ¬∞C
üíß Luftfugtighed (realtid): {reading.humidity:.1f} %
‚è∞ M√•lt: {reading.timestamp}

BYGNINGSINFORMATION FRA BBR:
{bbr_info_string}
Baseret p√• B√ÖDE ovenst√•ende SENSORM√ÖLINGER OG de detaljerede BYGNINGSOPLYSNINGER FRA BBR (hvis tilg√¶ngelige):
1. Hvad er de typiske klimarisici for DENNE SPECIFIKKE BYGNING (med dens type, materialer, alder, og konstruktion som beskrevet i BBR) p√• adressen?
2. Vurder bygningens s√•rbarhed over for fugt, skybrud og varme baseret p√• dens BBR-karakteristika (f.eks. k√¶lder, tagmateriale, opf√∏relses√•r).
3. Giv en KONKRET beredskabsplan TILPASSET DENNE SPECIFIKKE BYGNING.
4. Anbefal konkrete handlinger ‚Äì b√•de forebyggende og ved kritisk h√¶ndelse ‚Äì der tager h√∏jde for bygningens BBR-data og de aktuelle sensor m√•linger.
"""
        return prompt
    
    def _get_ai_response(self, prompt: str, analysis_type: str = "general") -> str:
        """Get response from OpenAI API and save to file."""
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "Du er en ekspert i klimarisikovurdering og bygningsvedligeholdelse i Danmark. Giv konkrete, handlingsorienterede r√•d baseret p√• de fremlagte sensor- og BBR-data."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=1000, # √òget max_tokens for potentielt l√¶ngere prompts/svar
                temperature=0.3
            )
            
            ai_response = response.choices[0].message.content
            self._save_analysis(prompt, ai_response, analysis_type)
            return ai_response
            
        except Exception as e:
            error_msg = f"‚ùå Kunne ikke f√• AI-analyse. Fejl: {str(e)}"
            # Gemmer stadig prompten selv ved fejl, for debugging
            self_save_analysis_path = Path(self.analysis_dir) / datetime.now().strftime("%Y-%m-%d") / f"{datetime.now().strftime('%H-%M-%S')}_{analysis_type}_error_prompt.txt"
            try:
                self_save_analysis_path.parent.mkdir(parents=True, exist_ok=True)
                with open(self_save_analysis_path, 'w', encoding='utf-8') as f_err:
                    f_err.write("Fejl under AI-kald.\nPROMPT:\n")
                    f_err.write(prompt)
            except Exception as save_e:
                print(f"‚ö†Ô∏è Yderligere fejl ved fors√∏g p√• at gemme fejlet prompt: {save_e}")

            return error_msg # Returnerer oprindelig fejlmeddelelse
    
    def _save_analysis(self, prompt: str, response: str, analysis_type: str) -> None:
        """Save AI analysis to structured files."""
        try:
            timestamp = datetime.now()
            date_str = timestamp.strftime("%Y-%m-%d")
            time_str = timestamp.strftime("%H-%M-%S")
            
            daily_dir = self.analysis_dir / date_str
            daily_dir.mkdir(exist_ok=True)
            
            analysis_file = daily_dir / f"{time_str}_{analysis_type}.txt"
            
            with open(analysis_file, 'w', encoding='utf-8') as f:
                f.write("="*60 + "\n")
                f.write(f"KLIMAANALYSE - {analysis_type.upper()}\n")
                f.write("="*60 + "\n")
                f.write(f"Tidspunkt: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Model: {self.model}\n")
                f.write("\n" + "-"*60 + "\nPROMPT:\n" + "-"*60 + "\n")
                f.write(prompt + "\n")
                f.write("\n" + "-"*60 + "\nAI RESPONS:\n" + "-"*60 + "\n")
                f.write(response + "\n\n" + "="*60 + "\n")
            
            latest_file = self.analysis_dir / "latest_analysis.txt"
            with open(latest_file, 'w', encoding='utf-8') as f:
                f.write(f"Seneste AI Analyse\n")
                f.write(f"Tidspunkt: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Type: {analysis_type}\n")
                f.write("-" * 50 + "\n")
                f.write(response + "\n")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Kunne ikke gemme analyse: {e}")


class ClimateMonitorApp:
    """Main application for climate monitoring and analysis."""
    
    def __init__(self, data_dir: str = "sensordata"):
        self.data_reader = DataReader(data_dir)
        self.analyzer = ClimateAnalyzer(data_dir)
        self.bbr_service = None
        if BBRAddressService:
            try:
                bbr_username = os.getenv('DATAFORDELER_NO_CERT_USERNAME')
                bbr_password = os.getenv('DATAFORDELER_NO_CERT_PASSWORD')
                if not bbr_username or not bbr_password:
                    print("‚ö†Ô∏è ADVARSEL: BBR brugernavn/password ikke fundet i milj√∏variabler.")
                    print("   BBR-data vil ikke blive hentet. Angiv DATAFORDELER_NO_CERT_USERNAME og DATAFORDELER_NO_CERT_PASSWORD.")
                else:
                    self.bbr_service = BBRAddressService(username=bbr_username, password=bbr_password)
            except Exception as e:
                print(f"‚ùå Fejl ved initialisering af BBRAddressService: {e}")
                self.bbr_service = None
        else:
            print("‚ÑπÔ∏è BBRAddressService ikke tilg√¶ngelig (importfejl). Forts√¶tter uden BBR-integration.")

    def run_current_analysis(self, address: str = "") -> None:
        """Analyze current climate conditions, including BBR data if available."""
        print("üîç Henter nuv√¶rende klimadata...")
        current_sensor_reading = self.data_reader.get_current_reading()
        
        if not current_sensor_reading:
            print("‚ùå Ingen aktuelle sensordata tilg√¶ngelige.")
            return

        print(f"üìà Nuv√¶rende sensordata: {current_sensor_reading.temperature:.1f}¬∞C, {current_sensor_reading.humidity:.1f}%")

        bbr_building_data: Optional[BuildingData] = None
        if self.bbr_service and address:
            print(f"üèòÔ∏è Henter BBR-data for adressen: {address}...")
            bbr_building_data = self.bbr_service.get_building_data(address)
            if bbr_building_data:
                print("‚úÖ BBR-data hentet succesfuldt.")
                # print(bbr_building_data.get_summary()) # For debugging
            else:
                print("‚ö†Ô∏è Kunne ikke hente BBR-data for den angivne adresse.")
        elif not address and self.bbr_service:
            print("‚ÑπÔ∏è Ingen adresse angivet, BBR-data vil ikke blive hentet.")
        elif not self.bbr_service:
             print("‚ÑπÔ∏è BBR Service er ikke konfigureret, forts√¶tter uden BBR-data.")


        print("ü§ñ AI analyserer nuv√¶rende forhold...")
        analysis = self.analyzer.analyze_current_conditions(
            current_sensor_reading, 
            bbr_building_data, 
            address or "Ukendt adresse" # S√∏rg for at adresse altid er en streng
        )
        
        print("\n" + "="*60)
        print("üìã AKTUEL KLIMAANALYSE (med BBR-data hvis muligt)")
        print("="*60)
        print(analysis)


def main():
    """Main application entry point."""
    print("üå°Ô∏è  KLIMAANALYSE SYSTEM (Udvidet med BBR)")
    print("="*50)
    
    try:
        data_dir = input("Data mappe (default: sensordata): ").strip() or "sensordata"
        app = ClimateMonitorApp(data_dir)
        
        address_input = input("üìç Indtast adresse for BBR-opslag (valgfri, tryk Enter for at springe over): ").strip()
        
        while True:
            print("\nüîß V√ÜLG HANDLING:")
            print("1. Analyser nuv√¶rende forhold (inkl. BBR-data hvis adresse er angivet)")
            print("2. Afslut") 
            
            choice = input("\nV√¶lg (1-2): ").strip()
            
            if choice == "1":
                # Hvis brugeren indtastede en ny adresse her, kunne man opdatere app.address
                # For nu bruges den adresse, der blev indtastet ved start.
                app.run_current_analysis(address_input)
                
            elif choice == "2":
                print("üëã Farvel!")
                break
            else:
                print("‚ùå Ugyldigt valg")
            
            input("\nTryk Enter for at forts√¶tte...")
            
    except KeyboardInterrupt:
        print("\nüëã Program stoppet af bruger")
    except Exception as e:
        print(f"‚ùå Programfejl: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()